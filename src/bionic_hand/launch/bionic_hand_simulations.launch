<?xml version="1.0"?>
<launch>
  <!-- Myo ROS node -->
  <node pkg="ros_myo" name="myo_raw" type="myo-rawNode.py" args="$(arg port)" output="screen"/>

  <!-- Bionic hand controller node -->
  <node pkg="bionic_hand" name="emg_control_node" type="emg_control_node" output="screen"/>

  <!-- user args -->
  <arg name="port" default="/dev/ttyACM0" doc="Port used by the Myo dongle. Check it with 'ls /dev/' and look for ttyACM0 for instance. You need to provide the full path." />
  <arg name="rviz" default="false" doc="rviz visualization or not"/>
  <!--visualization-->
  <group if="$(arg rviz)">
      <node
          name="rviz"
          pkg="rviz"
          type="rviz"
          args="-d $(find ros_myo)/rviz/orientation.rviz">
      </node>
  </group>

  <!-- rosserial node -->
  <!--
  <node pkg="bionic_hand" name="rosserial_python" type="serial_node.py" args="/dev/ttyUSB0" output="screen"/>
  rosserial used for raspberry pi only -->

<!-- ____________SCHUNK'S HAND SIMULATIONS PARAMETERS START HERE____________ -->

<!-- global PARAMS Change here if needed -->
  <arg name="gui" default="false" />
  <arg name="autostart" default="true"/>
  <arg name="serial_device" default="/dev/ttyUSB0"/>
  <arg name="simulation" default="true"/>
  <arg name="logging_config" default="$(find schunk_svh_driver)/etc/logging.xml" />
  <arg name="use_internal_logging" default="False"/>
  <arg name="controller_config" default="$(find schunk_svh_driver)/etc/controller_user.yaml" />
  <arg name="general_config" default="$(find schunk_svh_driver)/etc/svh.yaml" />
  <arg name="name_prefix" default="left_hand" />
  <!-- BEWARE SET THIS TO TRUE TO USE THE HAND WITHOUT ANY OTHER ROS TOOL -->
  <arg name="standalone" default="false"/>
  <!-- load basic configuration -->
  <rosparam file="$(arg general_config)" command="load" ns="svh_controller"/>
  <!-- Load Yaml Configuration file-->
  <rosparam file="$(find schunk_svh_driver)/etc/controller_default.yaml" command="load" ns="svh_controller"/>
  <!-- Load the User Config file which will overwrite values from default -->
  <rosparam file="$(arg controller_config)" command="load" ns="svh_controller"/>
  <!-- Robot description for State publishers -->
  <param name="robot_description" command="$(find xacro)/xacro --inorder $(find schunk_svh_driver)/description/urdf/svh-standalone.urdf.xacro" />
  <!-- Launch actual driver node (if not in simulation)-->
  <node unless="$(arg simulation)" name="svh_controller" pkg="schunk_svh_driver" type="svh_controller" output="screen">
    <param name="serial_device" value="$(arg serial_device)"/>
    <param name="autostart" value="$(arg autostart)" />
    <!-- Params for the ICL (driver internal) logging. General configuration in the given logging.xml, output will be saved to the who given files -->
    <param name="logging_config" value="$(arg logging_config)" />
    <param name="use_internal_logging" value="$(arg use_internal_logging)" />
    <param name="name_prefix" value="$(arg name_prefix)" />
  </node>
  <!-- Start RQT by default if not specified otherwise -->
  <node if="$(arg gui)" name="rqt_gui" pkg="rqt_gui" type="rqt_gui" />
  <!-- Joint state publisher is needed in order to use the mimic tag within the URDF (needed for propper visualization) Hardware will work without it thoug -->
    <node name="output_joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
            <rosparam unless="$(arg simulation)" param="source_list">["svh_controller/channel_feedback"] </rosparam>
            <!-- in case of a simulation the input shall behave like the regular input -->
            <rosparam if="$(arg simulation)" param="source_list">["svh_controller/channel_targets"] </rosparam>
            <!-- Never show the output gui of this one. We just use it to get the mimic tag of the urdf right -->
            <param name="use_gui" value="false" />
    </node>
  <!-- Robot state publisher for the TFs -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="state_publisher">
  </node>
  <!-- Joint state publisher to provide easy control of the real hardware. Just enabled if you want to use it standalone to provide easy acces with sliders -->
  <node if="$(arg standalone)" name="input_joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
        <remap from="joint_states" to="svh_controller/channel_targets" />
        <!-- if this node is used we always want to see its output -->
        <param name="use_gui" value="true"/>
  </node>

</launch>
