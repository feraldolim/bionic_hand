// Generated by gencpp from file bionic_hand/EmgArray.msg
// DO NOT EDIT!


#ifndef BIONIC_HAND_MESSAGE_EMGARRAY_H
#define BIONIC_HAND_MESSAGE_EMGARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace bionic_hand
{
template <class ContainerAllocator>
struct EmgArray_
{
  typedef EmgArray_<ContainerAllocator> Type;

  EmgArray_()
    : data()
    , moving(0)  {
      data.assign(0);
  }
  EmgArray_(const ContainerAllocator& _alloc)
    : data()
    , moving(0)  {
  (void)_alloc;
      data.assign(0);
  }



   typedef boost::array<int16_t, 8>  _data_type;
  _data_type data;

   typedef int16_t _moving_type;
  _moving_type moving;




  typedef boost::shared_ptr< ::bionic_hand::EmgArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bionic_hand::EmgArray_<ContainerAllocator> const> ConstPtr;

}; // struct EmgArray_

typedef ::bionic_hand::EmgArray_<std::allocator<void> > EmgArray;

typedef boost::shared_ptr< ::bionic_hand::EmgArray > EmgArrayPtr;
typedef boost::shared_ptr< ::bionic_hand::EmgArray const> EmgArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bionic_hand::EmgArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bionic_hand::EmgArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace bionic_hand

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'bionic_hand': ['/home/feraldo/ROS_ws/bionic_hand_ws/src/bionic_hand/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::bionic_hand::EmgArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bionic_hand::EmgArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bionic_hand::EmgArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bionic_hand::EmgArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bionic_hand::EmgArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bionic_hand::EmgArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bionic_hand::EmgArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "926d498bb3e9f898f2a3ff6ed5aff58c";
  }

  static const char* value(const ::bionic_hand::EmgArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x926d498bb3e9f898ULL;
  static const uint64_t static_value2 = 0xf2a3ff6ed5aff58cULL;
};

template<class ContainerAllocator>
struct DataType< ::bionic_hand::EmgArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bionic_hand/EmgArray";
  }

  static const char* value(const ::bionic_hand::EmgArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bionic_hand::EmgArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# EmgArray message for the Thalmic Myo, which has 8 EMG sensors \n\
# arranged around the arm\n\
# There is a moving field that's unclear what it is looks like a bitmask\n\
\n\
int16[8] data\n\
int16 moving\n\
";
  }

  static const char* value(const ::bionic_hand::EmgArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bionic_hand::EmgArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.data);
      stream.next(m.moving);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EmgArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bionic_hand::EmgArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bionic_hand::EmgArray_<ContainerAllocator>& v)
  {
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.data[i]);
    }
    s << indent << "moving: ";
    Printer<int16_t>::stream(s, indent + "  ", v.moving);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BIONIC_HAND_MESSAGE_EMGARRAY_H
