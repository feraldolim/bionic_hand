// Generated by gencpp from file bionic_hand/FingerPosition.msg
// DO NOT EDIT!


#ifndef BIONIC_HAND_MESSAGE_FINGERPOSITION_H
#define BIONIC_HAND_MESSAGE_FINGERPOSITION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace bionic_hand
{
template <class ContainerAllocator>
struct FingerPosition_
{
  typedef FingerPosition_<ContainerAllocator> Type;

  FingerPosition_()
    : name()
    , position()
    , finger1(0)
    , finger2(0)
    , finger3(0)
    , finger4(0)
    , finger5(0)  {
    }
  FingerPosition_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , position(_alloc)
    , finger1(0)
    , finger2(0)
    , finger3(0)
    , finger4(0)
    , finger5(0)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _name_type;
  _name_type name;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _position_type;
  _position_type position;

   typedef int32_t _finger1_type;
  _finger1_type finger1;

   typedef int32_t _finger2_type;
  _finger2_type finger2;

   typedef int32_t _finger3_type;
  _finger3_type finger3;

   typedef int32_t _finger4_type;
  _finger4_type finger4;

   typedef int32_t _finger5_type;
  _finger5_type finger5;




  typedef boost::shared_ptr< ::bionic_hand::FingerPosition_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bionic_hand::FingerPosition_<ContainerAllocator> const> ConstPtr;

}; // struct FingerPosition_

typedef ::bionic_hand::FingerPosition_<std::allocator<void> > FingerPosition;

typedef boost::shared_ptr< ::bionic_hand::FingerPosition > FingerPositionPtr;
typedef boost::shared_ptr< ::bionic_hand::FingerPosition const> FingerPositionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bionic_hand::FingerPosition_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bionic_hand::FingerPosition_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace bionic_hand

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'bionic_hand': ['/home/feraldo/ROS_ws/bionic_hand_ws/src/bionic_hand/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::bionic_hand::FingerPosition_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bionic_hand::FingerPosition_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bionic_hand::FingerPosition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bionic_hand::FingerPosition_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bionic_hand::FingerPosition_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bionic_hand::FingerPosition_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bionic_hand::FingerPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2ff4dd92cbc5633d3b65693952f22ad1";
  }

  static const char* value(const ::bionic_hand::FingerPosition_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2ff4dd92cbc5633dULL;
  static const uint64_t static_value2 = 0x3b65693952f22ad1ULL;
};

template<class ContainerAllocator>
struct DataType< ::bionic_hand::FingerPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bionic_hand/FingerPosition";
  }

  static const char* value(const ::bionic_hand::FingerPosition_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bionic_hand::FingerPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] name\n\
float64[] position\n\
int32 finger1\n\
int32 finger2\n\
int32 finger3\n\
int32 finger4\n\
int32 finger5\n\
\n\
\n\
";
  }

  static const char* value(const ::bionic_hand::FingerPosition_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bionic_hand::FingerPosition_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.position);
      stream.next(m.finger1);
      stream.next(m.finger2);
      stream.next(m.finger3);
      stream.next(m.finger4);
      stream.next(m.finger5);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FingerPosition_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bionic_hand::FingerPosition_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bionic_hand::FingerPosition_<ContainerAllocator>& v)
  {
    s << indent << "name[]" << std::endl;
    for (size_t i = 0; i < v.name.size(); ++i)
    {
      s << indent << "  name[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name[i]);
    }
    s << indent << "position[]" << std::endl;
    for (size_t i = 0; i < v.position.size(); ++i)
    {
      s << indent << "  position[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.position[i]);
    }
    s << indent << "finger1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.finger1);
    s << indent << "finger2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.finger2);
    s << indent << "finger3: ";
    Printer<int32_t>::stream(s, indent + "  ", v.finger3);
    s << indent << "finger4: ";
    Printer<int32_t>::stream(s, indent + "  ", v.finger4);
    s << indent << "finger5: ";
    Printer<int32_t>::stream(s, indent + "  ", v.finger5);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BIONIC_HAND_MESSAGE_FINGERPOSITION_H
