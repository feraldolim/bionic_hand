// Generated by gencpp from file bionic_hand/MyoArm.msg
// DO NOT EDIT!


#ifndef BIONIC_HAND_MESSAGE_MYOARM_H
#define BIONIC_HAND_MESSAGE_MYOARM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace bionic_hand
{
template <class ContainerAllocator>
struct MyoArm_
{
  typedef MyoArm_<ContainerAllocator> Type;

  MyoArm_()
    : arm(0)
    , xdir(0)  {
    }
  MyoArm_(const ContainerAllocator& _alloc)
    : arm(0)
    , xdir(0)  {
  (void)_alloc;
    }



   typedef uint8_t _arm_type;
  _arm_type arm;

   typedef uint8_t _xdir_type;
  _xdir_type xdir;


    enum { UNKNOWN = 0u };
     enum { RIGHT = 1u };
     enum { LEFT = 2u };
     enum { X_TOWARD_WRIST = 11u };
     enum { X_TOWARD_ELBOW = 12u };
 

  typedef boost::shared_ptr< ::bionic_hand::MyoArm_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bionic_hand::MyoArm_<ContainerAllocator> const> ConstPtr;

}; // struct MyoArm_

typedef ::bionic_hand::MyoArm_<std::allocator<void> > MyoArm;

typedef boost::shared_ptr< ::bionic_hand::MyoArm > MyoArmPtr;
typedef boost::shared_ptr< ::bionic_hand::MyoArm const> MyoArmConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bionic_hand::MyoArm_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bionic_hand::MyoArm_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace bionic_hand

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'bionic_hand': ['/home/feraldo/ROS_ws/bionic_hand_ws/src/bionic_hand/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::bionic_hand::MyoArm_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bionic_hand::MyoArm_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bionic_hand::MyoArm_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bionic_hand::MyoArm_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bionic_hand::MyoArm_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bionic_hand::MyoArm_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bionic_hand::MyoArm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "18b76488390e8ae3f8451095f1b48ad8";
  }

  static const char* value(const ::bionic_hand::MyoArm_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x18b76488390e8ae3ULL;
  static const uint64_t static_value2 = 0xf8451095f1b48ad8ULL;
};

template<class ContainerAllocator>
struct DataType< ::bionic_hand::MyoArm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bionic_hand/MyoArm";
  }

  static const char* value(const ::bionic_hand::MyoArm_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bionic_hand::MyoArm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Arm message for the Thalmic Myo. Using firmware > 1.0, \n\
# Thalmic Gesture Recognition is possible after sync gesture is performed.\n\
\n\
# arm represents which arm the device is on\n\
uint8 UNKNOWN=0\n\
uint8 RIGHT=1\n\
uint8 LEFT=2\n\
uint8 arm\n\
\n\
# xdir represents the direction of the x-axis\n\
# Sharing UNKNOWN=0\n\
uint8 X_TOWARD_WRIST=11\n\
uint8 X_TOWARD_ELBOW=12\n\
uint8 xdir\n\
";
  }

  static const char* value(const ::bionic_hand::MyoArm_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bionic_hand::MyoArm_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.arm);
      stream.next(m.xdir);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MyoArm_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bionic_hand::MyoArm_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bionic_hand::MyoArm_<ContainerAllocator>& v)
  {
    s << indent << "arm: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.arm);
    s << indent << "xdir: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.xdir);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BIONIC_HAND_MESSAGE_MYOARM_H
